// Generated by `wit-bindgen` 0.43.0.

///|
pub fn f_list_in_record1(_a : ListInRecord1) -> Unit {
  ignore(_a)
}

///|
pub fn f_list_in_record2() -> ListInRecord2 {
  { a: "list_in_record2" }
}

///|
pub fn f_list_in_record3(_a : ListInRecord3) -> ListInRecord3 {
  { a: "list_in_record3 output" }
}

///|
pub fn f_list_in_record4(_a : ListInRecord4) -> ListInRecord4 {
  { a: "result4".to_string() }
}

///|
pub fn f_list_in_variant1(
  _a : String?,
  _b : Result[Unit, String],
) -> Unit {
  try {
    assert_eq(_a.unwrap(), "foo")
    assert_eq(_b.unwrap_err(), "bar")
  } catch {
    _ => panic()
  }
}

///|
pub fn f_list_in_variant2() -> String? {
  Some("list_in_variant2".to_string())
}

///|
pub fn f_list_in_variant3(_a : String?) -> String? {
  try {
    assert_eq(_a.unwrap(), "input3")
  } catch {
    _ => panic()
  }
  Some("output3".to_string())
}

///|
pub fn errno_result() -> Result[Unit, MyErrno] {
  let mut first : Bool = true
  if first {
    first = false
    Err(MyErrno::B)
  } else {
    Ok(())
  }
}

///|
pub fn list_typedefs(
  _a : String,
  _c : Array[String],
) -> (FixedArray[Byte], Array[String]) {
  try {
    assert_eq(_a, "typedef1")
    assert_eq(_c.length(), 1)
    assert_eq(_c[0], "typedef2")
  } catch {
    _ => panic()
  }
  ("typedef3".to_bytes().to_fixedarray(), ["typedef4".to_string()])
}

///|
pub fn list_of_variants(
  _a : Array[Bool],
  _b : Array[Result[Unit, Unit]],
  _c : Array[MyErrno],
) -> (Array[Bool], Array[Result[Unit, Unit]], Array[MyErrno]) {
  try {
    assert_eq(_a, [true, false])
    assert_eq(_b, [Ok(()), Err(())])
    assert_eq(_c, [MyErrno::SUCCESS, MyErrno::A])
  } catch {
    _ => panic()
  }
  ([false, true], [Err(()), Ok(())], [MyErrno::A, MyErrno::B])
}
